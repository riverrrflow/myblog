<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>river&#39;s blog</title>
    <link>http://riverrrflow.github.io/myblog/</link>
    <description>Recent content on river&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 01 Feb 2019 15:38:52 +0800</lastBuildDate>
    
        <atom:link href="http://riverrrflow.github.io/myblog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://riverrrflow.github.io/myblog/about/</link>
      <pubDate>Fri, 01 Feb 2019 15:38:52 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/about/</guid>
      
        <description>&lt;p&gt;活在当下&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I Believe, I Believe&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;riverrrflow@gmail.com&lt;/code&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>zookeeper学习(1)小例子</title>
      <link>http://riverrrflow.github.io/myblog/post/2019-02-12_zookeeper_test/</link>
      <pubDate>Tue, 12 Feb 2019 22:45:55 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/post/2019-02-12_zookeeper_test/</guid>
      
        <description>&lt;p&gt;watch小例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class ConnectionWatcher implements Watcher {
    private CountDownLatch connectedSignal = new CountDownLatch(1);
    private static final int SESSION_TIMEOUT = 5000;
    protected ZooKeeper zk;

    public void connect(String hosts) throws InterruptedException, IOException {
        zk = new ZooKeeper(hosts, SESSION_TIMEOUT, this);
        connectedSignal.await();
    }

    public void process(WatchedEvent event) {
        if(event.getState() == Event.KeeperState.SyncConnected) {
            connectedSignal.countDown();
        }
    }

    public void close() throws InterruptedException {
        zk.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;列出节点的子节点：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class HelloZookeeper extends ConnectionWatcher {

    public void list(String groupName) throws KeeperException, InterruptedException{
        String path =&amp;quot;/&amp;quot;+groupName;
        try {
            List&amp;lt;String&amp;gt; children = zk.getChildren(path, false);
            if(children.isEmpty()){
                System.out.printf(&amp;quot;No memebers in group %s\n&amp;quot;,groupName);
                System.exit(1);
            }
            for(String child : children){
                System.out.printf(&amp;quot;group = %s, child = %s\n&amp;quot;, groupName, child);
            }
        } catch (KeeperException.NoNodeException e) {
            System.out.printf(&amp;quot;Group %s does not exist!\n&amp;quot;, groupName);
            System.exit(1);
        }
    }

    public static void main(String[] args) throws IOException, InterruptedException, KeeperException {
        HelloZookeeper helloZookeeper = new HelloZookeeper();
        helloZookeeper.connect(args[0]);
        helloZookeeper.list(args[1]);
        helloZookeeper.close();
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/6120fe13gy1g09tm38ec0j21ll1pan5o.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>2015年终总结</title>
      <link>http://riverrrflow.github.io/myblog/post/2015-12-31-summary2015/</link>
      <pubDate>Thu, 31 Dec 2015 16:01:23 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/post/2015-12-31-summary2015/</guid>
      
        <description>

&lt;p&gt;看着去年自己写的总结，再想想今年，感慨颇多。一年时间真的好快，快的好像昨天的我还在键盘上敲着去年的总结，一年的时间又感觉很慢，很多东西都已悄然变化，不似从前。&lt;/p&gt;

&lt;h2 id=&#34;实习与工作&#34;&gt;实习与工作&lt;/h2&gt;

&lt;p&gt;作为联培生已经在siat呆了一年半的时间，也马上要离开了，想想今年主要的工作是在做RFID智能停车的项目，项目组成员很多，我主要做后台接口那块，自己出活容易，但更多的工夫是花在和上下层之间的沟通，包括协议、数据字段、格式等，但正是如此，也锻炼了我认为非常重要的能力：沟通与团队协作。同时，让我更加明白：与人沟通比和机器沟通要难不少~&lt;/p&gt;

&lt;p&gt;另一方面，回想在siat待的一年半，期间有过抱怨、纠结和苦恼，但此刻留在心里更多的是感恩与欢笑，张博、宁博、榕姐等，谢谢你们成为我的老师和前辈，也许你们从未一本正经教给我什么，但耳濡目染中，我学到了很多。还有一起来联培的科大的小伙伴们，我们学习就开讨论班，吃饭就占领大桌，出去玩就一声吆喝，一起参加比赛，团结如斯，&amp;rdquo;基情&amp;rdquo;如斯，谢谢你们这一年半的陪伴与支持，非常幸运能有你们这群小伙伴！&lt;/p&gt;

&lt;h2 id=&#34;生活&#34;&gt;生活&lt;/h2&gt;

&lt;p&gt;今年最幸运的是妹子毕业了就来深圳了，从一个人变成两个人，刚开始8月份还真有点不太习惯，因为是合租房，也不太有家的感觉，但现在也渐渐稳定下来，过年准备见见双方父母，也算是一大喜事，圆了去年总结的一大愿望。&lt;/p&gt;

&lt;p&gt;找完工作也去合肥浪了一圈，主要是去见见同学朋友，逛逛合肥本部，不过，竟然在本部图书馆看到有人dotA，真想上去冲他喊一句:&amp;ldquo;同学，。。。。注意补刀！&amp;rdquo;&lt;/p&gt;

&lt;p&gt;厦门是前两天和小伙伴一共9人一起去的，曾厝垵、鼓浪屿、中山路、厦大，都去逛了逛，风景挺好，挺文艺的城市，最主要的还是和小伙伴们在一起玩的狠开心~&lt;/p&gt;

&lt;h2 id=&#34;书籍与电影&#34;&gt;书籍与电影&lt;/h2&gt;

&lt;p&gt;今年因为找工作，书还是看了不少，不过全是技术类和找工作相关的，重点推荐几个：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://book.douban.com/subject/10432347/&#34;&gt;《算法》&lt;/a&gt;，Robert Sedgewick和Kevin Wayne所著，涵盖所有程序员必须掌握的50种算法，重点是算法全部都是用Java实现，深入浅出，图文并茂，Java程序员必备啊！&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://book.douban.com/subject/3360807/&#34;&gt;《Effective Java》&lt;/a&gt;，也是Java程序员必备，让你有更好的编码习惯，更高效的使用Java。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://book.douban.com/subject/3004255/&#34;&gt;《编程之美》&lt;/a&gt;，很多面试笔试都是考的上面的题，刷一刷还是很有必要的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://book.douban.com/subject/25723064/&#34;&gt;《大型网站技术架构》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://book.douban.com/subject/25867042/&#34;&gt;《大型网站系统与Java中间件开发实践》&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;非技术类的数很少，但也都是经典：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://book.douban.com/subject/7163250/&#34;&gt;《明朝那些事儿》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://book.douban.com/subject/6953273/&#34;&gt;《盗墓笔记》&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;电影：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://movie.douban.com/subject/25773932/&#34;&gt;Whiplash&lt;/a&gt;，爆裂鼓手，黑暗励志片，本来早就出来了，今年才看到。To be greatest, or nothing。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://movie.douban.com/subject/3592854/&#34;&gt;Mad Max: Fury Road&lt;/a&gt;，从头high到尾，爽不可言！&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://movie.douban.com/subject/3077412/&#34;&gt;寻龙诀&lt;/a&gt;，国产良心之作，特效杠杠的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://movie.douban.com/subject/10594965/&#34;&gt;实习生&lt;/a&gt;，老年绅士，懂得察言观色，做事分寸得当，情商爆表！&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://movie.douban.com/subject/25964071/&#34;&gt;夏洛特烦恼&lt;/a&gt;，一次就好，带你去看天荒地老。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;关于心态&#34;&gt;关于心态&lt;/h2&gt;

&lt;p&gt;一年的时间，自己的心态有了很大的变化，环境和圈子造就人，但更重要的是自己的内心，不气馁，勿骄躁，自信洒脱，纵情向前，常怀感恩，一切都会水到渠成，一切都在意料之中。&lt;/p&gt;

&lt;h2 id=&#34;新年展望&#34;&gt;新年展望&lt;/h2&gt;

&lt;p&gt;新的一年，马上就要去鹅厂实习和工作，踏踏实实好好工作与学习。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Mac多显示器之间的焦点切换</title>
      <link>http://riverrrflow.github.io/myblog/post/2015-11-30-switch-multi-display/</link>
      <pubDate>Mon, 30 Nov 2015 16:01:23 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/post/2015-11-30-switch-multi-display/</guid>
      
        <description>&lt;p&gt;13寸的MBP屏幕实在太小，故入手了DVI的转接口外接了公司台式机的显示器，内置显示器用来码代码，外接显示器用来看网页等,双屏显示妥妥的。&lt;/p&gt;

&lt;p&gt;但很快发现多显示器之间的焦点切换非常麻烦，每次码代码时需要切换到浏览器查资料都需要用鼠标点外接的显示器，需要切换回来写代码时又要用鼠标点回来，作为一名高效（搞笑）的键盘党，这能忍？？？&lt;/p&gt;

&lt;p&gt;于是速度网上查找攻略，果然找到完美解决办法，如下:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先需要到网上搜索并下载Mac上的鼠标点击程序&lt;strong&gt;Cliclick&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;接着便是使用神器Automator的时刻了，点击打开程序Automator，选择&lt;code&gt;服务&lt;/code&gt;, 接下来的步骤如下图:
&lt;img src=&#34;http://ww1.sinaimg.cn/large/6120fe13jw1eyj531uatkj21ja11eh0d.jpg&#34; alt=&#34;&#34; /&gt;
写好脚本执行后，需要把脚本保存下来，可以自己命名，我的为&lt;code&gt;选择屏幕1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;接下来就是设置快捷键了，打开&lt;code&gt;系统偏好设置&lt;/code&gt;-&lt;code&gt;键盘&lt;/code&gt;-&lt;code&gt;快捷键&lt;/code&gt;-&lt;code&gt;服务&lt;/code&gt;-&lt;code&gt;通用&lt;/code&gt;，可以看到自己之前保存的脚本，设置快捷键即可:
&lt;img src=&#34;http://ww3.sinaimg.cn/large/6120fe13jw1eyj5bpe5umj20ig0ea0vm.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;按照同样的方法再设置&lt;code&gt;选择屏幕2&lt;/code&gt;即可&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;原理：
每次按对应的快捷键，就是在你设置的坐标位置上程序执行点击鼠标的操作，这样就实现了切换屏幕焦点的作用，awesome！！！&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Ubuntu14.04编译OpenJDK7</title>
      <link>http://riverrrflow.github.io/myblog/post/2015-07-15-build-openjdk7/</link>
      <pubDate>Fri, 10 Jul 2015 16:01:23 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/post/2015-07-15-build-openjdk7/</guid>
      
        <description>

&lt;p&gt;最近在看&lt;a href=&#34;http://book.douban.com/subject/6522893/&#34;&gt;深入理解Java虚拟机&lt;/a&gt;，第一章有讲到自己编译OpenJDK7，故用Ubuntu14.04实践下。&lt;/p&gt;

&lt;h2 id=&#34;构建编译环境&#34;&gt;构建编译环境&lt;/h2&gt;

&lt;h3 id=&#34;jdk1-7-0-45&#34;&gt;JDK1.7.0_45&lt;/h3&gt;

&lt;p&gt;到oracle官网上下载JDK1.7.0_45，解压到指定目录。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo tar zxvf jdk-7u45-linux-x64.tar.gz -C /usr/lib/jvm
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ant1-9-6&#34;&gt;Ant1.9.6&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo tar zxvf apache-ant-1.9.6-bin.tar.gz -C /usr/lib/ant
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;配置环境变量&#34;&gt;配置环境变量&lt;/h3&gt;

&lt;p&gt;/etc/profile&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export JAVA_HOME=/usr/lib/jvm/jdk1.7.0_45  
export ANT_HOME=/usr/lib/ant/apache-ant-1.9.6
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar    
PATH=$CLASSPATH:ANT_HOME/bin:$JAVA_HOME/bin:$PATH  
export PATH 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;source /etc/profile&lt;/code&gt;使环境变量生效&lt;/p&gt;

&lt;h2 id=&#34;编译&#34;&gt;编译&lt;/h2&gt;

&lt;h3 id=&#34;编写编译脚本&#34;&gt;编写编译脚本&lt;/h3&gt;

&lt;p&gt;在下载的OpenJDK7的源码目录下新建build.sh，编写如下脚本&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash  
#设置语言  
export LANG=C   
# JDK安装路径，必须设置
export ALT_BOOTDIR=/usr/lib/jvm/jdk1.7.0_45
  
#允许自动下载依赖包  
export ALLOW_DOWNLOADS=true  
  
#使用预编译头文件，不加这个编译会更慢一些 
export USE_PRECOMPILED_HEADER=true  
  
#要编译的内容  
export BUILD_LANGTOOLS=true  
export BUILD_JAXP=false
export BUILD_JAXWS=false
export BUILD_CORBA=false  
export BUILD_HOSTPOT=true  
export BUILD_JDK=true  
  
#要编译的版本  
export SKIP_DEBUG_BUILD=false  
export SKIP_FASTDEBUG_BUILD=true  
export DEBUG_NAME=debug  
  
#把它设置为FALSE可以避免javaws和浏览器Java插件之类的部分build  
BUILD_DEPLOY=false  
  
#把它设置为false就不会build出安装包。因为安装包里有一些奇怪的依赖  
#但即便不build出它也已经得到完整的JDK镜像,所以还是不用build它  
BUILD_INSTALL=false  ：
  
#存放编译结果  
export ALT_OUTPUTDIR=/home/mango/setup/openjdk/build
  
unset CLASSPATH  
unset JAVA_HOME  
#make sanity &amp;amp;&amp;amp; make  
make 2&amp;gt;&amp;amp;1 | tee $ALT_OUTPUTDIR/build.log 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;编译-1&#34;&gt;编译&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;./build.sh&lt;/code&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>决策树</title>
      <link>http://riverrrflow.github.io/myblog/post/2015-06-10-decision-tree/</link>
      <pubDate>Wed, 10 Jun 2015 16:01:23 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/post/2015-06-10-decision-tree/</guid>
      
        <description>

&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;分类决策树模型是一种描述对实例进行分类的树形结构，决策树由结点和有向边组成，借点有两种类型：内部结点和叶结点。&lt;/p&gt;

&lt;h2 id=&#34;特征选择&#34;&gt;特征选择&lt;/h2&gt;

&lt;p&gt;选取对训练数据具有分类能力的特征，提高决策树的学习效率。通常采用&lt;code&gt;信息增益(ID3)&lt;/code&gt;或&lt;code&gt;信息增益比(C4.5)&lt;/code&gt;为特征选择的准则。&lt;/p&gt;

&lt;h3 id=&#34;熵-entropy&#34;&gt;熵(entropy)&lt;/h3&gt;

&lt;p&gt;熵为随机变量不确定的度量，定义为信息的期望值，名字来源于信息论之父香农。&lt;/p&gt;

&lt;p&gt;设随机变量X是一个取有限个值的离散随机变量，其概率分布为: $$ P(X=x_i) = p_i, i = 1,2,&amp;hellip;,n $$&lt;/p&gt;

&lt;p&gt;则随机变量X的熵为: $$ H(X) = -\sum_{i=1}^n p_i log(p_i) $$&lt;/p&gt;

&lt;p&gt;若对数以2为底，则熵的单位为比特(bit)，从信息论中熵的一种解释是熵确定了要编码的集合中任意成员的分类所需要的最少二进制位数。
熵越大，则随机变量的不确定性越大。&lt;/p&gt;

&lt;h3 id=&#34;条件熵&#34;&gt;条件熵&lt;/h3&gt;

&lt;p&gt;设有随机变量(X,Y)，其联合概率分布为:
$$ H(X=x_i, Y=y_j) = p_{ij}, i=1,2,&amp;hellip;,n,j=1,2,&amp;hellip;,m $$&lt;/p&gt;

&lt;p&gt;条件熵H(Y|X)表示在已知随机变量X的条件下随机变量Y的不确定性。定义为X给定条件下Y的条件概率分布的熵对X的数学期望：
$$ H(Y|X) = \sum_{i=1}^n p_i H(Y|X=x_i), 其中p_i=P(X=x_i) $$&lt;/p&gt;

&lt;h3 id=&#34;信息增益&#34;&gt;&lt;strong&gt;信息增益&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;信息增益为得知特征X的信息而使得类Y的信息不确定性减少的程度，定义为特征A对训练集D的信息增益为g(D,A)，定义为集合D的经验熵H(D)与特征A给定条件下D的经验条件熵H(D|A)之差，即：
$$ g(D,A) = H(D) - H(D|A) $$&lt;/p&gt;

&lt;p&gt;一般地，熵H(Y)与条件熵H(Y|X)之差称为互信息。决策树学习中的信息增益等价于训练数据集中类与特征的互信息。
信息增益依赖于特征，不同的特征往往具有不同的信息增益，信息增益大的特征往往具有更强的分类能力。&lt;/p&gt;

&lt;h4 id=&#34;求信息增益的例子&#34;&gt;求信息增益的例子&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Day&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Outlook&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Temperature&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Humidity&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Wind&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;PlayTennis&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Sunny&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Hot&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;High&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Weak&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Sunny&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Hot&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;High&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Strong&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Overcast&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Hot&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;High&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Weak&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Rain&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mild&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;High&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Weak&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Rain&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Cool&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Normal&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Weak&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Rain&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Cool&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Normal&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Strong&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Overcast&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Cool&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Normal&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Strong&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Sunny&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mild&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;High&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Weak&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Sunny&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Cool&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Normal&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Weak&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Rain&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mild&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Normal&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Weak&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D11&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Sunny&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mild&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Normal&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Strong&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Overcast&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mild&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;High&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Strong&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D13&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Overcast&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Hot&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Normal&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Weak&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;D14&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Rain&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mild&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;High&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Strong&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;训练集D相对于PlayTennis的熵为：&lt;/p&gt;

&lt;p&gt;可以看到，Gain(D,Outlook)信息增益最大，故选择Outlook作为根结点，并为它的每一个可能的值在根节点下创建分支。接着递归地算子节点的信息增益，选择信息增益值最大的作为结点，直到将所有的类分开为止。&lt;/p&gt;

&lt;p&gt;信息增益比较偏袒具有较多值的属性，因为太多的可能值必然会把训练集分割成非常小的空间，因此，相比训练集，它会有非常高的信息增益，尽管实际情况并非这样。&lt;/p&gt;

&lt;p&gt;避免这个不足的方法是用信息增益比作为特征选择的度量准则。&lt;/p&gt;

&lt;h3 id=&#34;信息增益比&#34;&gt;&lt;strong&gt;信息增益比&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;信息增益比通过假如一个被称作&lt;code&gt;分裂信息&lt;/code&gt;的项来惩罚类似Date的属性，分裂信息用来衡量属性分裂数据的广度和均匀性：&lt;/p&gt;

&lt;h2 id=&#34;id3算法&#34;&gt;ID3算法&lt;/h2&gt;

&lt;p&gt;核心：在决策树各个结点上应用&lt;code&gt;信息增益&lt;/code&gt;准则选择特征。
具体方法是：从根节点出发，对结点计算所有可能的特征的信息增益，选择信息增益最大的特征作为结点的特征，由该特征的不同取值建立子结点，再对子结点递归地调用以上方法，构建决策树，直到所有特征的信息增益均很小或没有特征可以选择为止，最后得到一个决策树。
ID3算法存在的&lt;code&gt;缺点&lt;/code&gt;：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ID3算法在选择根节点和内部节点中的分支属性时，采用信息增益作为评价标准。信息增益的缺点是倾向于选择取值较多的属性，但在有些情况下这类属性可能不会提供太多有价值的信息。&lt;/li&gt;
&lt;li&gt;ID3算法只能对描述属性为离散型属性的数据集构造决策树。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;c4-5算法&#34;&gt;C4.5算法&lt;/h2&gt;

&lt;p&gt;C4.5算法之所以是最常用的决策树算法，是因为它继承了ID3算法的所有优点并对ID3算法进行了改进和补充。C4.5算法采用信息增益率作为选择分支属性的标准，并克服了ID3算法中信息增益选择属性时偏向选择取值多的属性的不足，并能够完成对连续属性离散化的处理；还能够对不完整数据进行处理。C4.5算法属于基于信息论Information Theory的方法，以信息论为基础，以信息熵和信息增益度为衡量标准，从而实现对数据的归纳和分类。
C4.5算法主要做出了以下方面的改进:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;可以处理连续数值型属性&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;信息增益比&lt;/code&gt;来选择属性&lt;/li&gt;
&lt;li&gt;后剪枝策略&lt;/li&gt;
&lt;li&gt;缺失值处理&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;C4.5的&lt;code&gt;缺点&lt;/code&gt;：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;算法低效，在构造树的过程中，需要对数据集进行多次的顺序扫描和排序，因而导致算法的低效&lt;/li&gt;
&lt;li&gt;内存受限，适合于能够驻留于内存的数据集，当训练集大得无法在内存容纳时程序无法运行。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料：&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/10590856/&#34;&gt;《统计学习方法》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://book.douban.com/subject/1102235/&#34;&gt;《机器学习》&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>k近邻法</title>
      <link>http://riverrrflow.github.io/myblog/post/2015-06-05-knn/</link>
      <pubDate>Fri, 05 Jun 2015 16:01:23 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/post/2015-06-05-knn/</guid>
      
        <description>

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;k近邻法(k-nearest neighbor, k-NN)是一种基本的分类与回归的非参数统计方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;k-NN分类：一个对象的分类是由其邻居的“多数表决”确定的，k 个最近邻居中最常见的分类决定了赋予该对象的类别。若 k = 1，则该对象的类别直接由最近的一个节点赋予。
k-NN回归：输出是其 k 个最近邻居的值的平均值。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;k-NN是一种&lt;code&gt;基于实例&lt;/code&gt;的学习，或者是局部近似和将所有计算推迟到分类之后的惰性学习。k-近邻算法是所有的机器学习算法中最简单的之一。
本文主要介绍k-NN的分类问题。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;k-nn简介&#34;&gt;k-NN简介&lt;/h2&gt;

&lt;p&gt;给定一个训练数据集，对新的输入实例，在训练数据集中找到与该实例最临近的k个实例，这k个实例的多数属于某个类，就把该输入实例分为这类。&lt;/p&gt;

&lt;h2 id=&#34;k-nn模型三要素&#34;&gt;k-NN模型三要素&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;距离度量: 一般采用欧氏距离。不同的距离度量所确定的最近邻点不同。
k值选择：k一般取比较小的数值。但k值过小，模型越复杂，容易过拟合。
分类决策规则：往往采用多数表决。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;k-nn实现-kd树&#34;&gt;k-NN实现：kd树&lt;/h2&gt;

&lt;p&gt;实现k-NN主要考虑的问题是如果对训练数据进行快速k近邻搜索。最简单的实现方法是线性扫描，但当训练集很大时，效率很低。为了提高k近邻搜索的效率，可以考虑使用特殊的结构存储训练数据，已减少计算距离的次数，下面要介绍的就是kd树方法。&lt;/p&gt;

&lt;h3 id=&#34;构造kd树&#34;&gt;构造kd树&lt;/h3&gt;

&lt;p&gt;kd树是一种对k维空间中的实例点进行存储以便对其进行快速检索的二叉树结构。构造kd数相当于不断地用垂直于坐标轴的超平面将k维空间划分，构成一系列的k维超矩形区域。
方法如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;构造根节点，对应于包含所有实例点的k维空间的超矩形区域。&lt;/li&gt;
&lt;li&gt;选择以$x^{(1)}$为坐标轴，以所有实例的$x^{(1)}$坐标的中位数作为切分点，用通过切分点并与坐标轴垂直的超平面将超矩形区域划分为两个子区域，左子结点对应与坐标$x^{(1)}$小于切分点的子区域，右子节点对应与坐标$x^{(1)}$大于切分点的子区域。&lt;/li&gt;
&lt;li&gt;重复：对深度为j的节点，选择$x^{(l)}$为切分的坐标轴，$l=(j mode k) + 1$。将落在切分超平面上的实例点保存在该节点。&lt;/li&gt;
&lt;li&gt;直到两个子区域没有实例存在时停止。从而形成kd树的区域划分。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;搜索kd树&#34;&gt;搜索kd树&lt;/h3&gt;

&lt;p&gt;给定一个目标点，搜索其最近邻点，首先先找到包含目标点的叶结点，然后从该结点出发，依次回退到父结点；不断查找与目标点最邻近的结点，当确定不可能存在更近的结点时终止。这样搜索就被限制在空间的局部区域上，效率大为提高。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在kd树上找到包含目标点的叶结点，并以此叶结点作为“当前最近点”。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;递归地向上回退，在每个结点进行以下操作：&lt;/p&gt;

&lt;p&gt;2.1 如果该节点保存的实例点比当前最近点距离目标点更近，则已该实例点为“当前最近点”。&lt;/p&gt;

&lt;p&gt;2.2 当前最近点一定存在于该结点一个子节点对应的区域。检查该子结点的父结点的另一子节点对应的区域是否有更近的点。具体地，检查另一子结点对应的区域是否与以目标点为中心，以目标点与“当前实例点”间的距离为半径的超球体相交。如果相交，则可能在另一个子结点对应的区域内存在距目标点更近的点，移动到另一子结点，接着递归地进行最近邻搜索，如果不相交，向上回退。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当回退到根结点时，搜索结束，最后的“当前最近点”即为最近邻点。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;如果实例点随机分布，则kd树的搜索平均计算复杂度为O(logN)，N为训练实例。kd树更适合于训练实例数远大于空间维度数时的k-NN。而空间维度数接近训练实例时，几乎接近线性扫描。&lt;/p&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/10590856/&#34;&gt;《统计学习方法》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%9C%80%E8%BF%91%E9%84%B0%E5%B1%85%E6%B3%95&#34;&gt;维基百科&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>统计学习方法概述</title>
      <link>http://riverrrflow.github.io/myblog/post/2015-05-25-statistical-learning-overview/</link>
      <pubDate>Mon, 25 May 2015 16:01:23 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/post/2015-05-25-statistical-learning-overview/</guid>
      
        <description>

&lt;h2 id=&#34;统计学习三要素&#34;&gt;统计学习三要素&lt;/h2&gt;

&lt;h3 id=&#34;模型-model&#34;&gt;模型(model)&lt;/h3&gt;

&lt;p&gt;模型即为所要学习的条件概率分布或决策函数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;由决策函数表示的模型为非概率模型。
由条件概率表示的模型为概率模型。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;策略-strategy&#34;&gt;策略(strategy)&lt;/h3&gt;

&lt;p&gt;按照什么样的准则学习或选择最优模型。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;经验风险最小化(ERM)会产生过拟合问题
结构风险最小化(SRM)等价于正则化
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;算法-algorithm&#34;&gt;算法(algorithm)&lt;/h3&gt;

&lt;p&gt;学习模型的具体计算方法。&lt;/p&gt;

&lt;h2 id=&#34;模型选择的方法&#34;&gt;模型选择的方法&lt;/h2&gt;

&lt;h3 id=&#34;正则化-regularization&#34;&gt;正则化(regularization)&lt;/h3&gt;

&lt;p&gt;正则化即为在经验风险上加一个正则化项，正则化项一般是模型复杂度的单调递增函数，模型越复杂，正则化项就越大。它一般是参数向量的L2范数，作用是选择经验风险与模型复杂度同时较小的模型。&lt;/p&gt;

&lt;h3 id=&#34;交叉验证-cross-validation&#34;&gt;交叉验证(cross-validation)&lt;/h3&gt;

&lt;p&gt;将数据集随机分为三部分：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;训练集(training set): 训练模型，占比60%
交叉验证集(cross validation set): 模型的选择，占比20%
测试集(test set): 最终对学习方法的评估，占比20%
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;泛化能力&#34;&gt;泛化能力&lt;/h2&gt;

&lt;p&gt;该方法学习到的模型对未知数据的预测能力。&lt;/p&gt;

&lt;h2 id=&#34;二类分类问题的常用评价指标f1值&#34;&gt;二类分类问题的常用评价指标F1值&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;TP(True Positive): 将正类预测为正类数
FN(False Negative): 将正类预测为负类数
FP(False Positive): 将负类预测为正类数
TN(True Negative): 将负类预测为负类数
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;精确率(precision): $$P = \frac{TP}{TP + FP}$$&lt;/p&gt;

&lt;p&gt;召回率(recall): $$R = \frac{TP}{TP + FN}$$&lt;/p&gt;

&lt;p&gt;F1值为P和R的调和均值: $$\frac{2}{F1}=\frac{1}{P} + \frac{1}{R}$$&lt;/p&gt;

&lt;p&gt;$$F1 = \frac{2TP}{2TP + FP + FN} = \frac{2PR}{P + R}$$&lt;/p&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/10590856/&#34;&gt;《统计学习方法》&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>LDA初窥</title>
      <link>http://riverrrflow.github.io/myblog/post/2015-05-20-ldabout/</link>
      <pubDate>Wed, 20 May 2015 16:01:23 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/post/2015-05-20-ldabout/</guid>
      
        <description>

&lt;h2 id=&#34;英文twitter提取主题&#34;&gt;英文Twitter提取主题&lt;/h2&gt;

&lt;h3 id=&#34;数据预处理&#34;&gt;数据预处理&lt;/h3&gt;

&lt;h4 id=&#34;原始语料&#34;&gt;原始语料&lt;/h4&gt;

&lt;p&gt;数据原始为100万条twitter&lt;/p&gt;

&lt;h4 id=&#34;步骤&#34;&gt;步骤&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;拿到要处理的字段:linelist[2]&lt;/li&gt;
&lt;li&gt;去除掉除英文外的其他语言的twitter&lt;/li&gt;
&lt;li&gt;去掉标点符号、停用词、http超链接等&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- more --&gt;

&lt;h4 id=&#34;结果&#34;&gt;结果&lt;/h4&gt;

&lt;p&gt;处理完的数据还剩下591707条，所花时间大概5分钟&lt;/p&gt;

&lt;h3 id=&#34;lda提取主题&#34;&gt;LDA提取主题&lt;/h3&gt;

&lt;h4 id=&#34;步骤-1&#34;&gt;步骤&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;读取文件，设定需要提取的主题数K，构建词典，为每条twitter的每个word随机分配topic&lt;/li&gt;
&lt;li&gt;进行关键数据结构的初始化:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;   nw[i][j]: 词汇i指派给主题j的个数
   nd[i][j]: 文档i中指派给主题j的单词个数
   nwsum[k]: 指派给主题k的单词个数
   ndsum[k]: 文档k的单词个数
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;用Gibbs方法进行循环采样，采用公式计算出重要参数:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;   Theta[M][K]:每个文档的主题分布
   Phi[V][K]:每个主题的词汇分布
   Z[M][N]:每个文档中每个词的所属主题
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;结果-1&#34;&gt;结果&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;循环1000次，设定找10个主题以及主题最相关的20个词，所花时间大概20分钟，效果如表1&lt;/li&gt;
&lt;li&gt;对算法进行改进，加入burn-in与samplelag，加入burn-in是为了得到平稳分布之后再采样，加入samplelag是为了消除相邻两次采样的相关性
并加大循环次数为10000次，burn-in为2000次，samplelag为10，在服务器上跑了大概3个小时20分钟，所得结果如表2&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;表1&#34;&gt;表1&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;video&lt;/td&gt;
&lt;td&gt;news&lt;/td&gt;
&lt;td&gt;twitter&lt;/td&gt;
&lt;td&gt;daily&lt;/td&gt;
&lt;td&gt;free&lt;/td&gt;
&lt;td&gt;day&lt;/td&gt;
&lt;td&gt;jobs&lt;/td&gt;
&lt;td&gt;de&lt;/td&gt;
&lt;td&gt;blog&lt;/td&gt;
&lt;td&gt;live&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;check&lt;/td&gt;
&lt;td&gt;game&lt;/td&gt;
&lt;td&gt;facebook&lt;/td&gt;
&lt;td&gt;twittascope&lt;/td&gt;
&lt;td&gt;iphone&lt;/td&gt;
&lt;td&gt;spymaster&lt;/td&gt;
&lt;td&gt;news&lt;/td&gt;
&lt;td&gt;la&lt;/td&gt;
&lt;td&gt;post&lt;/td&gt;
&lt;td&gt;hey&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;music&lt;/td&gt;
&lt;td&gt;obama&lt;/td&gt;
&lt;td&gt;check&lt;/td&gt;
&lt;td&gt;photo&lt;/td&gt;
&lt;td&gt;online&lt;/td&gt;
&lt;td&gt;sale&lt;/td&gt;
&lt;td&gt;job&lt;/td&gt;
&lt;td&gt;en&lt;/td&gt;
&lt;td&gt;read&lt;/td&gt;
&lt;td&gt;love&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;playing&lt;/td&gt;
&lt;td&gt;air&lt;/td&gt;
&lt;td&gt;site&lt;/td&gt;
&lt;td&gt;flu&lt;/td&gt;
&lt;td&gt;money&lt;/td&gt;
&lt;td&gt;followers&lt;/td&gt;
&lt;td&gt;city&lt;/td&gt;
&lt;td&gt;el&lt;/td&gt;
&lt;td&gt;life&lt;/td&gt;
&lt;td&gt;lol&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;listen&lt;/td&gt;
&lt;td&gt;red&lt;/td&gt;
&lt;td&gt;google&lt;/td&gt;
&lt;td&gt;win&lt;/td&gt;
&lt;td&gt;marketing&lt;/td&gt;
&lt;td&gt;house&lt;/td&gt;
&lt;td&gt;san&lt;/td&gt;
&lt;td&gt;van&lt;/td&gt;
&lt;td&gt;directory&lt;/td&gt;
&lt;td&gt;dont&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;movie&lt;/td&gt;
&lt;td&gt;lakers&lt;/td&gt;
&lt;td&gt;follow&lt;/td&gt;
&lt;td&gt;vote&lt;/td&gt;
&lt;td&gt;business&lt;/td&gt;
&lt;td&gt;level&lt;/td&gt;
&lt;td&gt;health&lt;/td&gt;
&lt;td&gt;los&lt;/td&gt;
&lt;td&gt;reading&lt;/td&gt;
&lt;td&gt;pic&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;listening&lt;/td&gt;
&lt;td&gt;car&lt;/td&gt;
&lt;td&gt;join&lt;/td&gt;
&lt;td&gt;swine&lt;/td&gt;
&lt;td&gt;social&lt;/td&gt;
&lt;td&gt;check&lt;/td&gt;
&lt;td&gt;sales&lt;/td&gt;
&lt;td&gt;tv&lt;/td&gt;
&lt;td&gt;book&lt;/td&gt;
&lt;td&gt;gt&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;watching&lt;/td&gt;
&lt;td&gt;win&lt;/td&gt;
&lt;td&gt;link&lt;/td&gt;
&lt;td&gt;food&lt;/td&gt;
&lt;td&gt;media&lt;/td&gt;
&lt;td&gt;free&lt;/td&gt;
&lt;td&gt;manager&lt;/td&gt;
&lt;td&gt;para&lt;/td&gt;
&lt;td&gt;tips&lt;/td&gt;
&lt;td&gt;haha&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;youtubu&lt;/td&gt;
&lt;td&gt;cup&lt;/td&gt;
&lt;td&gt;free&lt;/td&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;internet&lt;/td&gt;
&lt;td&gt;reached&lt;/td&gt;
&lt;td&gt;united&lt;/td&gt;
&lt;td&gt;da&lt;/td&gt;
&lt;td&gt;people&lt;/td&gt;
&lt;td&gt;cute&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;watch&lt;/td&gt;
&lt;td&gt;women&lt;/td&gt;
&lt;td&gt;search&lt;/td&gt;
&lt;td&gt;die&lt;/td&gt;
&lt;td&gt;web&lt;/td&gt;
&lt;td&gt;attempt&lt;/td&gt;
&lt;td&gt;real&lt;/td&gt;
&lt;td&gt;op&lt;/td&gt;
&lt;td&gt;health&lt;/td&gt;
&lt;td&gt;guys&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;表2&#34;&gt;表2&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;blog&lt;/td&gt;
&lt;td&gt;june&lt;/td&gt;
&lt;td&gt;daily&lt;/td&gt;
&lt;td&gt;love&lt;/td&gt;
&lt;td&gt;de&lt;/td&gt;
&lt;td&gt;game&lt;/td&gt;
&lt;td&gt;twitter&lt;/td&gt;
&lt;td&gt;playing&lt;/td&gt;
&lt;td&gt;jobs&lt;/td&gt;
&lt;td&gt;live&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;post&lt;/td&gt;
&lt;td&gt;flu&lt;/td&gt;
&lt;td&gt;twitteascope&lt;/td&gt;
&lt;td&gt;day&lt;/td&gt;
&lt;td&gt;la&lt;/td&gt;
&lt;td&gt;win&lt;/td&gt;
&lt;td&gt;free&lt;/td&gt;
&lt;td&gt;music&lt;/td&gt;
&lt;td&gt;job&lt;/td&gt;
&lt;td&gt;hey&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;facebook&lt;/td&gt;
&lt;td&gt;car&lt;/td&gt;
&lt;td&gt;check&lt;/td&gt;
&lt;td&gt;lol&lt;/td&gt;
&lt;td&gt;en&lt;/td&gt;
&lt;td&gt;spymaster&lt;/td&gt;
&lt;td&gt;online&lt;/td&gt;
&lt;td&gt;love&lt;/td&gt;
&lt;td&gt;news&lt;/td&gt;
&lt;td&gt;iphone&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;news&lt;/td&gt;
&lt;td&gt;news&lt;/td&gt;
&lt;td&gt;video&lt;/td&gt;
&lt;td&gt;dont&lt;/td&gt;
&lt;td&gt;el&lt;/td&gt;
&lt;td&gt;red&lt;/td&gt;
&lt;td&gt;followers&lt;/td&gt;
&lt;td&gt;song&lt;/td&gt;
&lt;td&gt;san&lt;/td&gt;
&lt;td&gt;free&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;obama&lt;/td&gt;
&lt;td&gt;swine&lt;/td&gt;
&lt;td&gt;photo&lt;/td&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;van&lt;/td&gt;
&lt;td&gt;friday&lt;/td&gt;
&lt;td&gt;money&lt;/td&gt;
&lt;td&gt;tonight&lt;/td&gt;
&lt;td&gt;sales&lt;/td&gt;
&lt;td&gt;souljaboytellem&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;health&lt;/td&gt;
&lt;td&gt;air&lt;/td&gt;
&lt;td&gt;twitter&lt;/td&gt;
&lt;td&gt;pic&lt;/td&gt;
&lt;td&gt;los&lt;/td&gt;
&lt;td&gt;lakers&lt;/td&gt;
&lt;td&gt;markering&lt;/td&gt;
&lt;td&gt;listen&lt;/td&gt;
&lt;td&gt;manager&lt;/td&gt;
&lt;td&gt;offer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;url&lt;/td&gt;
&lt;td&gt;city&lt;/td&gt;
&lt;td&gt;posted&lt;/td&gt;
&lt;td&gt;cute&lt;/td&gt;
&lt;td&gt;da&lt;/td&gt;
&lt;td&gt;cup&lt;/td&gt;
&lt;td&gt;web&lt;/td&gt;
&lt;td&gt;girl&lt;/td&gt;
&lt;td&gt;real&lt;/td&gt;
&lt;td&gt;gt&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;care&lt;/td&gt;
&lt;td&gt;day&lt;/td&gt;
&lt;td&gt;youtubu&lt;/td&gt;
&lt;td&gt;nice&lt;/td&gt;
&lt;td&gt;die&lt;/td&gt;
&lt;td&gt;attempt&lt;/td&gt;
&lt;td&gt;site&lt;/td&gt;
&lt;td&gt;hot&lt;/td&gt;
&lt;td&gt;business&lt;/td&gt;
&lt;td&gt;windows&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;bill&lt;/td&gt;
&lt;td&gt;sale&lt;/td&gt;
&lt;td&gt;watch&lt;/td&gt;
&lt;td&gt;haha&lt;/td&gt;
&lt;td&gt;para&lt;/td&gt;
&lt;td&gt;assassination&lt;/td&gt;
&lt;td&gt;social&lt;/td&gt;
&lt;td&gt;video&lt;/td&gt;
&lt;td&gt;market&lt;/td&gt;
&lt;td&gt;apple&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;read&lt;/td&gt;
&lt;td&gt;house&lt;/td&gt;
&lt;td&gt;level&lt;/td&gt;
&lt;td&gt;happy&lt;/td&gt;
&lt;td&gt;op&lt;/td&gt;
&lt;td&gt;new&lt;/td&gt;
&lt;td&gt;business&lt;/td&gt;
&lt;td&gt;listening&lt;/td&gt;
&lt;td&gt;united&lt;/td&gt;
&lt;td&gt;petition&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;中文新闻提取主题&#34;&gt;中文新闻提取主题&lt;/h2&gt;

&lt;h3 id=&#34;数据预处理-1&#34;&gt;数据预处理&lt;/h3&gt;

&lt;h4 id=&#34;原始语料-1&#34;&gt;原始语料&lt;/h4&gt;

&lt;p&gt;来源于SOHU新闻网站保存的大量经过编辑手工整理与分类的新闻语料与对应的分类信息，采用了旅游、教育、军事共30个文本进行分析&lt;/p&gt;

&lt;h4 id=&#34;步骤-2&#34;&gt;步骤&lt;/h4&gt;

&lt;p&gt;PYTHON最强大的除了它的第三方库之外，应该就属对字符串的处理了，以前我对此深信不疑，结果发现，在对中文的处理上，PYTHON2还是有很大的欠缺&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;中文不同于英文，首先要设定PYTHON的默认编解码方式为UTF-8，读取文件后，首先第一步是要进行分词，我采用的是PYTHON的开源第三方库JIEBA&lt;/li&gt;
&lt;li&gt;去掉英文符号与数字&lt;/li&gt;
&lt;li&gt;去掉中文符号，要先把中文符号解码为UTF-8，然后进行比较&lt;/li&gt;
&lt;li&gt;去掉中文停用词，首先需要将每个词编码为UTF-8，然后进行比较&lt;/li&gt;
&lt;li&gt;最后要写入的字符编码为UTF-8，再写入文件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;BTW：因为PYTHON2默认的编码方式是ASCII，会对中文的处理造成很多不方便，处理之前都要转换成UNICODE，好在PYTHON3已经意识到了这个问题，所以PYTHON3的默认编码方式是UNICODE&lt;/p&gt;

&lt;h4 id=&#34;结果-2&#34;&gt;结果&lt;/h4&gt;

&lt;p&gt;因为总共只有30个100-200个词的新闻文本，处理非常快，只需要短短的3-5秒&lt;/p&gt;

&lt;h2 id=&#34;lda提取主题-1&#34;&gt;LDA提取主题&lt;/h2&gt;

&lt;h4 id=&#34;步骤-3&#34;&gt;步骤&lt;/h4&gt;

&lt;p&gt;因为LDA采用的是词袋模型，故算法与具体的语言无关，步骤和英文的一样&lt;/p&gt;

&lt;h4 id=&#34;结果-3&#34;&gt;结果&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;循环1000次，设定找3个主题已经主题最相关的20个词，所花时间大概6秒，效果可以&lt;/li&gt;
&lt;li&gt;同英文一样的改进，加入BURN-IN、SAMPLELAG，循环10000次，所花时间大概40秒，效果和之前的差不多&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;分析原因&#34;&gt;分析原因&lt;/h3&gt;

&lt;p&gt;效果虽然都还不错，但是两次结果差不多，主要是语料太少，区分度不明显&lt;/p&gt;

&lt;h2 id=&#34;下一步计划&#34;&gt;下一步计划&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;自己写爬虫爬新浪微博&lt;/li&gt;
&lt;li&gt;针对LDA不适合处理短文本的特性来改进算法，初步设想加入作者的主题分布和对转发微博的处理
2.1. &lt;strong&gt;如果一条微博是原创微博，其主题由作者的主题分布中抽取&lt;/strong&gt;
2.2. &lt;strong&gt;如果是转发微博，则由转发部分的主题确定&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Mac下配置iTerm2实现快速远程登录</title>
      <link>http://riverrrflow.github.io/myblog/post/2015-04-24-mac-iterm-configuration/</link>
      <pubDate>Fri, 24 Apr 2015 16:01:23 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/post/2015-04-24-mac-iterm-configuration/</guid>
      
        <description>

&lt;p&gt;Mac上的神器太多，今天主要讲下如何配置iTerm2终端实现快速远程登录。&lt;/p&gt;

&lt;h3 id=&#34;编写脚本&#34;&gt;&lt;strong&gt;编写脚本&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;需要用到&lt;a href=&#34;http://linux.die.net/man/1/expect&#34;&gt;expect语法&lt;/a&gt;，代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/expect -f
set username YourUserName    // 设置用户名
set host ***.***.***.***     // 设置主机IP
set password YourPassword    // 设置密码
set time -1                  // 设置永不超时

spawn ssh $username@$host    // 启动一个新进程
expect &amp;quot;*assword:*&amp;quot;          // 进程返回带有assword:字符时
send &amp;quot;$password\r&amp;quot;           // 向进程输入前面设置的密码
interact                     // 允许用户交互
expect eof                   // 结束
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存到一个自己知道的目录，后面配置快捷键需要用到，我存放的目录是&lt;code&gt;~/program/myscripts/235.sh&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;配置iterm2&#34;&gt;&lt;strong&gt;配置iTerm2&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;在iTerm2下按&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;o&lt;/code&gt;（字母o，不是数字0），出现如下图：
&lt;img src=&#34;http://ww4.sinaimg.cn/large/6120fe13jw1erjdj6y6z7j214u0l8n06.jpg&#34; alt=&#34;&#34; /&gt;
点击框住的按钮&lt;code&gt;Edit Profiles...&lt;/code&gt;，会出现下面的图，点击左下角的加号新建一个Profile，设置快捷键执行刚写好的脚本：
&lt;img src=&#34;http://ww2.sinaimg.cn/large/6120fe13jw1erjdoa21p4j21fc0u0wnj.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;测试&#34;&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;我设置的是&lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;T&lt;/code&gt;，按了组合键之后出现如下图：
&lt;img src=&#34;http://ww4.sinaimg.cn/large/6120fe13jw1erjdx08q74j20vu0lyai4.jpg&#34; alt=&#34;&#34; /&gt;
ssh成功登录，直接按快捷键就能快速登录~&lt;/p&gt;

&lt;h3 id=&#34;配置文件下载&#34;&gt;&lt;strong&gt;配置文件下载&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jlovedragon/profile/blob/master/mac/sshlogin.sh&#34;&gt;github链接&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>R语言绘图初阶</title>
      <link>http://riverrrflow.github.io/myblog/post/2015-02-23-r-graph/</link>
      <pubDate>Mon, 23 Feb 2015 16:01:23 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/post/2015-02-23-r-graph/</guid>
      
        <description>

&lt;p&gt;前几天关注了一下互联网行业大公司实习岗位的招聘要求，对数据挖掘和算法方向的都有&lt;strong&gt;熟悉R语言的优先&lt;/strong&gt;这一项，想起去年自己自学了一段时间的R，但是是走马观花，重点放在了python的学习上，没有扎实去理解和学习，所以最近利用下班时间准备捡起来，而R在绘图方面比Python高了不是一个档次，故在了解了基础语法和概念之后，我便把重点放在绘图上了，下面就具体的记记绘图的各种函数和图形的参数，留待复习与查阅。参考书籍为《R语言实战》。&lt;/p&gt;

&lt;h2 id=&#34;plot-函数&#34;&gt;plot()函数&lt;/h2&gt;

&lt;p&gt;plot()是R中为对象作图的一个泛型函数，它的输出将根据所绘制对象的类型的不同而变化。先用&lt;code&gt;help(plot)&lt;/code&gt;看下介绍。
用法为&lt;code&gt;plot(x, y, ...)&lt;/code&gt;，其中重点说下type参数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;quot;p&amp;quot; for **p**oints,
&amp;quot;l&amp;quot; for **l**ines,
&amp;quot;b&amp;quot; for **b**oth,
&amp;quot;c&amp;quot; for the lines part alone of &amp;quot;b&amp;quot;,
&amp;quot;o&amp;quot; for both &#39;overplotted&#39;,
&amp;quot;h&amp;quot; for &#39;histogram&#39; like(or /Users/quantin/Documents/MakedownBlog/R-graph.md&#39;high-density&#39;) vertical lines,
&amp;quot;s&amp;quot; for stair steps,
&amp;quot;S&amp;quot; for other steps,
&amp;quot;n&amp;quot; for no plotting.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;图形参数&#34;&gt;图形参数&lt;/h2&gt;

&lt;p&gt;我们可以通过修改称为图形参数的选项来自定义一副图形的多个特性（字体，颜色，坐标轴，标题）。修改图形参数的一种方法是通过函数par()来指定这些选项。以这种方式设定的参数值除非被再次修改，否则将会在会话结束前一直有效。&lt;/p&gt;

&lt;h4 id=&#34;符号和线条&#34;&gt;符号和线条&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;参数&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;pch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定绘制点是使用的符号(如下图)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;cex&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定符号的大小。cex是一个数值，表示绘图符号相对于默认大小的缩放倍数。默认大小为1，1.5表示放大为默认值的1.5倍&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;lty&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定线条类型（如下图）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;lwd&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定线条宽度。lwd是以默认值的相对大小来表示的（默认值为1）。eg.lwd=2将生成一条两倍与默认宽度的线条&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&#34;http://ww4.sinaimg.cn/large/005ZsWKgjw1eprrovcyb4j306c072aa7.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://ww1.sinaimg.cn/large/005ZsWKgjw1eprrq13pxej308606umx9.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;对于21~25，可以指定边界颜色&lt;code&gt;col=&lt;/code&gt;和填充色&lt;code&gt;bg=&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;颜色&#34;&gt;颜色&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;参数&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;col&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;默认的绘图颜色。某些函数（如lines和pie）可以接受一个含有颜色值的向量并自动循环使用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;col.axis&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;坐标轴刻度文字的颜色&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;col.lab&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;坐标轴标签（名称）的颜色&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;col.main&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;标题颜色&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;col.sub&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;副标题颜色&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;fg&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;图形的前景色&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;bg&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;图形的背景色&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;可以通过颜色小标、颜色名称、十六进制的颜色值、RGB值或HSV值来指定颜色。例如白色的等价表示方式有：col=1, col=&amp;ldquo;white&amp;rdquo;, col=&amp;ldquo;#FFFFFF&amp;rdquo;, col=rgb(1,1,1)和col=hsv(0,0,1)。&lt;/p&gt;

&lt;p&gt;colors()可以返回所有可用颜色的名称。&lt;/p&gt;

&lt;p&gt;R中也有多种用于创建连续型颜色向量的函数，包括rainbow(), heat.colors(), terrain.colors(), topo,colors(), cm.colors()。举例来说，rainbow(10)可以生成10中连续的&amp;rdquo;彩虹型&amp;rdquo;颜色。多阶灰度色可使用gray()函数生成。&lt;/p&gt;

&lt;h4 id=&#34;文本属性&#34;&gt;文本属性&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;用于指定文本大小的参数&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;参数&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;cex&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;表示相对于默认大小缩放倍数的数值。默认大小为1，1.5表示放大为默认值的1.5倍&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;cex.axis&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;坐标轴刻度文字的缩放倍数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;cex.lab&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;坐标轴标签（名称）的缩放倍数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;cex.main&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;标题的缩放倍数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;cex.sub&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;副标题的缩放倍数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;用于指定字体族、字号和字样的参数
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;参数&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;font&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;整数。用于指定绘图使用的字体样式。1=常规，2=粗体，3=斜体，4=粗斜体，5=符号字体&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;font.axis&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;坐标轴刻度文字的字体样式&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;font.lab&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;坐标轴标签（名称）的字体样式&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;font.main&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;标题的字体样式&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;font.sub&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;副标题的字体样式&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ps&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;字体磅值（1磅约为1/72英寸）。文本的最终大小为ps*cex。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;family&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;绘制文本时使用的字体族。标准的取值为serif(衬线),sans(无衬线)和mono(等宽)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;图像尺寸和边界尺寸&#34;&gt;图像尺寸和边界尺寸&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;参数&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;pin&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;以英寸表示的图形尺寸（宽和高）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;mai&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;以数值向量表示的边界大小，顺序为&amp;rdquo;下，左，上，右&amp;rdquo;，单位为英寸&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;mar&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;以数值向量表示的边界大小，顺序为&amp;rdquo;下，左，上，右&amp;rdquo;，单位为英分&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;添加文本-自定义坐标轴和图例&#34;&gt;添加文本、自定义坐标轴和图例&lt;/h3&gt;

&lt;h4 id=&#34;标题&#34;&gt;标题&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;参数&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;main&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;主标题&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;sub&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;副标题&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;xlab&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x坐标轴标签&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ylab&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;y坐标轴标签&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;xlim&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x坐标轴范围&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ylim&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;y坐标轴范围&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;坐标轴&#34;&gt;坐标轴&lt;/h4&gt;

&lt;p&gt;可以使用函数axis()来创建自定义的坐标轴，而非使用R中默认坐标轴。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;参数&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;side&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个整数，表示在图形的哪边绘制坐标轴（1=下，2=左，3=上，4=右）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;at&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个数值型向量，表示需要绘制刻度线的位置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;labels&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个字符型向量，表示置于刻度线旁边的文字标签&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;pos&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;坐标轴线绘制位置的坐标（即与另一条坐标轴相交位置的值）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;lty&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;线条类型&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;col&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;线条和刻度线颜色&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;las&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;标签是否平行于（=0）或垂直于（=2）坐标轴&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;tck&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;刻度线的长度，以相对于绘图区域大小的分数表示&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;参考线&#34;&gt;参考线&lt;/h4&gt;

&lt;p&gt;函数abline()可以用来为图形添加参考线。使用格式为：
abline(h=yvalues, v=xvalues)&lt;/p&gt;

&lt;h4 id=&#34;图例&#34;&gt;图例&lt;/h4&gt;

&lt;p&gt;函数legend()添加图例，其使用格式为：
legend(location，title, legend, &amp;hellip;)&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;参数&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;location&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定图例的位置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;title&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;图例标题的字符串（可选）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;legend&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;图例标签组成的字符型向量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;文本标注&#34;&gt;文本标注&lt;/h4&gt;

&lt;p&gt;可以通过函数text()和mtext()将文本添加到图形上。text()可向绘图区域内部添加文本，而mtext()可以向图形的四个边界之一添加文本。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;参数&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;location&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;文本的位置参数，可为一对x，y坐标，也可通过指定location为locator(1)使用鼠标来交互式地确定摆放位置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;pos&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;文本相对于位置参数的方位&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;side&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定用来放置文本的边&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;图形的组合&#34;&gt;图形的组合&lt;/h3&gt;

&lt;p&gt;在par()函数中使用图形参数mfrow=c(nrows,ncols)来创建按行填充的、行数为nrows、列数为ncols的图形矩阵，另外，可以使用nfcol=c(nrows,ncols)按列填充矩阵。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Python小结</title>
      <link>http://riverrrflow.github.io/myblog/post/2015-01-05-python-summary/</link>
      <pubDate>Mon, 05 Jan 2015 16:01:23 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/post/2015-01-05-python-summary/</guid>
      
        <description>

&lt;p&gt;用了将近3个月的python，也写了一些小程序，前几天看了&lt;a href=&#34;http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000&#34;&gt;廖雪峰的Python教程&lt;/a&gt;，感觉写的很不错，故从头到尾看了几遍，摘录其中我认为应该掌握的部分，即为这篇小结。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;python缺点&#34;&gt;python缺点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;运行速度慢，解释型语言&lt;/li&gt;
&lt;li&gt;代码不能加密&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;python解释器&#34;&gt;python解释器&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CPython&lt;/li&gt;
&lt;li&gt;IPython&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;print语句用逗号隔开就可以连成一串输出&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;python是大小写敏感的&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;缩进的利与弊&#34;&gt;缩进的利与弊&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;好处：

&lt;ol&gt;
&lt;li&gt;强迫你写出格式化的代码&lt;/li&gt;
&lt;li&gt;强迫你写出缩进较少的代码，你会倾向与把一段很长的代码拆分成若干函数，从而得到缩进较少的代码&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;坏处：

&lt;ol&gt;
&lt;li&gt;&amp;ldquo;复制-粘贴&amp;rdquo;功能失效，这是最坑爹的地方。当你重构代码时，粘贴过去的代码必须重新检查缩进是否正确。&lt;/li&gt;
&lt;li&gt;IDE很难像Java代码那样格式化Python代码&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;字符编码&#34;&gt;字符编码&lt;/h3&gt;

&lt;p&gt;Unicode标准把所有语言都统一到一套编码中，如果统一成Unicode编码，乱码问题虽然从此消失，但如果你写的文本全是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，所以就出现了把Unicode编码转化为&amp;rdquo;可变长编码&amp;rdquo;的UTF-8编码。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
#-*- coding: utf-8 -*-
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-tuple-dict-set&#34;&gt;list、tuple、dict、set&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;list：列表[]，可以随时添加和删除其中的元素。add添加，pop删除&lt;/li&gt;
&lt;li&gt;tuple：元组()，一旦初始化就不能修改。个人觉得有点像Java中的枚举（有待考证），tuple的单元素写法(a,)&lt;/li&gt;
&lt;li&gt;dict：字典[:]，在Java中称为map，使用键-值（key-value）存储，具有极快的查找速度，但内存浪费多

&lt;ul&gt;
&lt;li&gt;dict的key必须是不可变对象&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;set：集合([])，元素不能重复，要创建一个set，需要提供一个list作为输入集合，add添加，remove删除&lt;/p&gt;

&lt;h3 id=&#34;不可变对象&#34;&gt;不可变对象&lt;/h3&gt;

&lt;p&gt;str是不可变对象，list是可变对象&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;函数&#34;&gt;函数&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;pass语句什么都不做，可以用来作为占位符&lt;/li&gt;
&lt;li&gt;函数的默认参数必须是不可变对象&lt;/li&gt;
&lt;li&gt;可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple&lt;/li&gt;
&lt;li&gt;关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装成一个dict&lt;/li&gt;
&lt;li&gt;*args是可变参数，args接收的是tuple&lt;/li&gt;
&lt;li&gt;**kw是关键字参数，kw接收的是dict&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;列表生成式&#34;&gt;列表生成式&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[x # x for x in range(1, 11)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;函数式编程&#34;&gt;函数式编程&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;map/reduce/filter

&lt;ul&gt;
&lt;li&gt;map()函数接收两个参数，一个是函数，一个是序列，map将传入的函数一次作用到序列的每个元素，并把结果作为行的list返回&lt;/li&gt;
&lt;li&gt;reduce()函数也接受两个参数，和map一样，一个参数是函数，一个是序列，不同的是，reduce()把结果继续和序列的下一个元素做累积计算&lt;/li&gt;
&lt;li&gt;filter()函数用于过滤序列，参数类型和map()一样，不同的是，filter()把传入的函数一次作用于每个元素，然后根据返回值是True还是False决定保留或丢弃该元素&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;排序算法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sorted()也是一个高阶函数，可以接收一个比较函数来实现自定义的排序&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;返回函数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;闭包(Closure)程序：返回函数不要引用任何循环变量，或者后续会发生变化的变量&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;匿名函数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关键字lambda表示匿名函数，冒号前面的x表示函数参数（lambda x: **)&lt;/li&gt;
&lt;li&gt;匿名函数只能有一个表达式，不用写return&lt;/li&gt;
&lt;li&gt;用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;装饰器&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;偏函数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;functools.partial的作用就是把一个函数的某些值固定住（也就是设置默认值），返回一个新的函数&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;面向对象编程&#34;&gt;面向对象编程&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;类和实例

&lt;ul&gt;
&lt;li&gt;类是创建实例的模板，实例是一个一个具体的对象。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;访问限制

&lt;ul&gt;
&lt;li&gt;要让内部属性不被外部访问，可以把属性的名称前加上两个下划线&lt;strong&gt;，在python中，实例的变量名如果以&lt;/strong&gt;开头，就变成了一个私有变量（private），只有内部能访问，外部不能访问。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;继承和多态

&lt;ul&gt;
&lt;li&gt;继承可以把父类的所有功能都直接拿过来，这样就不必从零做起，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;获取对象信息

&lt;ul&gt;
&lt;li&gt;type():判断对象类型，返回type类型&lt;/li&gt;
&lt;li&gt;isinstance():判断class的类型，判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上。&lt;/li&gt;
&lt;li&gt;使用type()判断的基本类型也可以用isinstance()判断&lt;/li&gt;
&lt;li&gt;dir():获得一个对象的所有属性和方法，返回一个包含字符串的list&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;__slots__&lt;/strong&gt;:限制class能添加的属性，&lt;strong&gt;slots&lt;/strong&gt;定义的属性仅对当前类起作用，对继承的子类不起作用&lt;/li&gt;
&lt;li&gt;使用@property:python内置的@property装饰器负责把一个方法变成属性调用的&lt;/li&gt;
&lt;li&gt;多重继承&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;错误-调试和测试&#34;&gt;错误、调试和测试&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;可以在except语句块后面加一个else，但没有错误发生时，会自动执行else语句&lt;/li&gt;
&lt;li&gt;try&amp;hellip;except捕获错误可以跨越多层调用&lt;/li&gt;
&lt;li&gt;raise抛出异常&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;io编程&#34;&gt;IO编程&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;with语句为try/finally编程范式的一种替代，用于对资源访问进行控制的场合。&lt;/li&gt;
&lt;li&gt;with语句确保不管使用过程中是否发生异常都执行必要的&amp;rdquo;清理&amp;rdquo;操作，释放资源，比如文件使用后自动关闭、线程中锁的自动获取和释放等。&lt;/li&gt;
&lt;li&gt;os.path.abspath()、os.path.join(,)、os.path.split(,)、os.path.splittext()&lt;/li&gt;
&lt;li&gt;序列化：把变量从内存中变成可存储或传输的过程，在Python中称为pickling，模块为cPickle和pickle。推荐使用json&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;进程与线程&#34;&gt;进程与线程&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;多进程与多线程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享&lt;/li&gt;
&lt;li&gt;进程 vs 线程&lt;/li&gt;
&lt;li&gt;计算密集型 vs IO密集型&lt;/li&gt;
&lt;li&gt;异步IO&lt;/li&gt;
&lt;li&gt;分布式进程&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;正则表达式&#34;&gt;正则表达式&lt;/h3&gt;

&lt;p&gt;pass&lt;/p&gt;

&lt;h3 id=&#34;常用内建模块&#34;&gt;常用内建模块&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;collections
** namedtuple | deque | defaultdict | OrderedDict | * base64&lt;/li&gt;
&lt;li&gt;struct&lt;/li&gt;
&lt;li&gt;hashlib&lt;/li&gt;
&lt;li&gt;itertools&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web开发&#34;&gt;Web开发&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Web应用开发经历的阶段：

&lt;ul&gt;
&lt;li&gt;静态Web页面：由文本编辑器直接编辑并生成静态的HTML页面，如果要修改Web页面的内容，就需要再次编辑HTML源文件，早期的互联网Web页面就是静态的。&lt;/li&gt;
&lt;li&gt;CGI：由于静态Web页面无法和用户交互，比如用户填写了一个注册表单，静态Web页面就无法处理。要处理用户发送的动态数据，出现了Common Gateway Interface，简称CGI，用C和C++编写&lt;/li&gt;
&lt;li&gt;ASP\JSP\PHP：由于Web应用特点是修改频繁，用C和C++这样的低级语言非常不适合Web开发，而脚本语言由于开发效率高，与HTML结合紧密，因此，迅速取代了CGI模式。&lt;/li&gt;
&lt;li&gt;MVC：为了解决直接用脚本语言嵌入HTML导致的可维护性差的问题，Web应用也引入了Model-View-Controller的模式，来简化Web开发。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;HTTP请求的流程：

&lt;ol&gt;
&lt;li&gt;浏览器首先向服务器发送HTTP请求，请求包括：

&lt;ul&gt;
&lt;li&gt;方法：GET还是POST，GET仅请求资源，POST会附带用户数据&lt;/li&gt;
&lt;li&gt;路径：/full/url/path；&lt;/li&gt;
&lt;li&gt;域名：由Host头指定：Host：www.sina.com.cn&lt;/li&gt;
&lt;li&gt;以及其他一些相关Header，如果是POST，那么请求还包括一个Body，包含用户数据&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;服务器向浏览器返回HTTP响应，响应包括：

&lt;ul&gt;
&lt;li&gt;响应代码：200表示成功，3xx表示重定向，4xx表示客户端发送的请求有错误，5xx表示服务器端处理时发生错误&lt;/li&gt;
&lt;li&gt;响应类型：有Content-Type指定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;如果浏览器还需要继续向服务器请求其他资源，比如图片，就再次发出HTTP请求，重复步骤1、2&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;WSGI接口: Web Server Gateway Interface&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>2014年终总结</title>
      <link>http://riverrrflow.github.io/myblog/post/2014-12-31-summary2014/</link>
      <pubDate>Wed, 31 Dec 2014 16:01:23 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/post/2014-12-31-summary2014/</guid>
      
        <description>

&lt;p&gt;不知不觉，2015年已经到了，算下来自从高中结束，自己就已经很少写这种有点长又有点带着检讨气质的文章了（高中时写的检讨可是当着全班念的:P），随着日子一天天过去，回头想想现在的自己确实和以前有了很大的不同，但想细细去数具体的不同却又说不出来，唯有记下此刻自己脑海中一年的感受，留待以后回眸，勿忘最初的自己。&lt;/p&gt;

&lt;h2 id=&#34;关于学习&#34;&gt;关于学习&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;学业：经历了去年科大半年的蹂躏之后，今年上半年和去年下半年相比算是轻松多了，想想去年刚入学那会，想学点底层的东西，选了嵌入式方向，对于本科搞软件的确实有点吃力；学校还出台了新政策：重点课程10%的淘汰率；加上我又竞聘做了班长，也算是锻炼自己吧，晚上11点半之后回宿舍是常事，现在回过头来想，貌似科大一年的学习时间，晚上11点半之前回宿舍的次数屈指可数，当然氛围也在那儿，而且事实证明，大家找的实习都还不错，努力总是有回报的:)
在此列一下这一年来自己的课程和成绩：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://ww3.sinaimg.cn/large/6120fe13jw1enuyd8cui5j20c00bowft.jpg&#34; alt=&#34;&#34; /&gt;
也旁听了其他方向的两门课程：信息安全和软件技术专题，全是保健哥的精品课程。最后整个学年取得了专业第8班级第4的成绩，这是我可以接受的结果，当然，还是有进步的空间，比如随机过程这门课。同时，我也发现自己特别喜欢做实验，一般实验设计的比较好的课程我积极性都很高，比如程序设计的二进制炸弹、算法的红黑树、嵌操（嵌入式操作系统:P）的start_kernel()代码分析等。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;课外活动：学习之余，在春暖花开的3月份，也组织了一次校外联谊，和东大的妹子们一起去胥王山庄烧烤，在此期间也结识了现任的女朋友Tong，也促成了另一对，这活动的意义大大的！&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;关于实习&#34;&gt;关于实习&lt;/h2&gt;

&lt;p&gt;作为一名联培生，实习地点在新生入学时就定了&lt;a href=&#34;http://www.siat.ac.cn/&#34;&gt;SIAT&lt;/a&gt;，现在在这边主要的方向是数据挖掘和机器学习。
客观的讲联培，如果确实是家里比较困难，或者是对研究很感兴趣想读博士的，肯定是首选。如果两者都谈不上，请慎重，原因如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;研究院重科研，轻工程，但我们科大软院的培养模式就是工程型人才，大家也是奔着这个去的。&lt;/li&gt;
&lt;li&gt;虽说给你出了几万的学费，但你却晚半年毕业，半年时间你想想自己可以挣多少。&lt;/li&gt;
&lt;li&gt;当你的同学们每月都大几千的实习工资，而你的工资得算着吃喝时，你会是什么感受。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当然，既然也是自己当初不知情所作的选择，也没什么好抱怨的，而且现在的方向是我感兴趣的，算是幸运的，唯有静下心去学习，相信一切都会往好的方向走～&lt;/p&gt;

&lt;h2 id=&#34;关于爱情&#34;&gt;关于爱情&lt;/h2&gt;

&lt;p&gt;虽说去年就和现在的女朋友认识了，真正开始了解却是在今年3月份的联谊上，也直到6月份才确定关系，而也正是我要离开苏州的时候，刚开始就异地确实不容易，吵吵闹闹难免发生，还好现在我们的感情也算稳定，感谢妹子的信任与支持，希望明年的今天我们不再异地，也是2015年的一个大目标吧。&lt;/p&gt;

&lt;h2 id=&#34;关于友情&#34;&gt;关于友情&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;7月份，凤凰花开的路口，我给全班都定制了班服，上面印有每个人的头像，班费不够是赵老板一锤定音：买，不够的我出！这样的班主任我们无不感激！在照集体照时，也是一道非常不错的风景线:)，算是给大家留下一个美好的回忆，永远的嵌入式2班！这里还是得再次祭出竞选班长时的口号：就业最好，光棍最少～(忘了说了，咱班就一个女生，还被隔壁嵌1班给拐走了，不过那男同胞是我老乡，大伙也就忍了):P&lt;/li&gt;
&lt;li&gt;室友阮阮也是先我一步去实习了，想想估计以后再难有坐在一起操作(DOTA2)的机会了，当初QQ发一句&amp;rdquo;操作&amp;rdquo;，真的是胜过千言万语，在此也祝你在大百度越混越开吧～&lt;/li&gt;
&lt;li&gt;还有小郁，多谢你千里托同学寄过来的茶叶；炸智，日本的妹子应该很不错吧；沈公子，2W奖学金还剩多少；大家各奔东西，愿大家一路珍重！&lt;/li&gt;
&lt;li&gt;7月底来到深圳，高中铁哥们bo、狒狒给我接风洗尘，爽哉，这下半年也聚了好几次，靠谱的兄弟～&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;关于书籍&#34;&gt;关于书籍&lt;/h2&gt;

&lt;p&gt;今年看的书并不多，还是列一下：
上半年学业重，基本上都是上课的课本，《算法导论》、《深入理解计算机系统》等都是经典，都是跟着课程在看，后来找工作肯定还是要温习的。
期间偷闲看了众人推荐的《黑客与画家》，却没找到真正吸引我的点，个人觉得讲的有点泛，看上去说的很有道理，实际上给我的指导一般。
下半年大部分都是自学：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;《数学之美》这本书基本看完，科普了一下从嵌入式转到数据挖掘的小白，吴军博士用这种通俗易懂的方式来讲数学，赞！&lt;/li&gt;
&lt;li&gt;《机器学习实战》看了将近一半，用python来实现机器学习的各种算法，非常对我的胃口&lt;/li&gt;
&lt;li&gt;《PRML》圣经来了，可惜是全英文的，目前就自己关注的几章多看了几遍，每次看都会有不一样的收获&lt;/li&gt;
&lt;li&gt;《神雕侠侣》于妈的雷剧无力吐槽，唯有去回味书中的经典&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;关于计划&#34;&gt;关于计划&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;好好经营自己的博客，保持一周2-3篇的节奏&lt;/li&gt;
&lt;li&gt;参加开源项目，github要多多contributions&lt;/li&gt;
&lt;li&gt;文本挖掘这块还是得更加深入的学，多读写国外大牛的paper，提炼自己的观点&lt;/li&gt;
&lt;li&gt;开始看面试的各种基础知识和算法，为找工作做准备&lt;/li&gt;
&lt;li&gt;学点深度学习相关的内容，这个肯定是趋势&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;想读的书列一下：
技术：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;《Pattern Recognition and Machine Learning》&lt;/li&gt;
&lt;li&gt;《Python 源码剖析》&lt;/li&gt;
&lt;li&gt;《深入理解Java虚拟机》&lt;/li&gt;
&lt;li&gt;《Java性能优化权威指南》&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;非技术：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;《如何变得有思想》阮一峰&lt;/li&gt;
&lt;li&gt;《Rework》&lt;/li&gt;
&lt;li&gt;《小王子》&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前想到的就这么多，先写上吧&lt;/p&gt;

&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;

&lt;p&gt;电脑真的已经不堪重负，之前用windows7、Ubuntu卡的不行，发热非常厉害，但12月份一怒之下装了Archlinux感觉好多了，用着Emacs+URxvt+zsh确实挺顺手的，不过qq的问题确实没有解决，算是一个遗憾，过两天就要换Mac pro了，对于我这种喜欢折腾电脑和各种系统的人，早就想见识下Mac的真面目了。
来深圳半年煮面技术已经炉火纯青了，宿舍必备面条+鸡蛋+大头菜，经典台词：我下面给你吃哈:P
好像没啥要扯的了，就这样吧，祝自己本命年红红火火，工作爱情双丰收吧～&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>两种方法抓取落网所有专辑的音乐</title>
      <link>http://riverrrflow.github.io/myblog/post/2014-12-30-download-luoo-music/</link>
      <pubDate>Tue, 30 Dec 2014 16:01:23 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/post/2014-12-30-download-luoo-music/</guid>
      
        <description>

&lt;p&gt;在落网上听音乐是一个非常享受的事情，唯美的封面、文字，瞬间就觉得自己置身于一个没有喧嚣、没有嘈杂的环境里，一切尽在不言中～
最近在看爬虫相关的资料，想想正好用python爬爬落网练练手，说干就干，下面大致说下我爬落网的过程:&lt;/p&gt;

&lt;h2 id=&#34;明确目标&#34;&gt;明确目标&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;爬下落网所有期的音乐，并按每期的名字建立目录，将该期的音乐存在所属期的目录下&lt;/li&gt;
&lt;li&gt;程序能自动下载当前的最新一期&lt;/li&gt;
&lt;li&gt;每首音乐需正确命名，因为落网的音乐链接使用编号命名的，得改用正确的歌名命名&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;先来两张图看看效果：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;目录：
&lt;img src=&#34;http://ww4.sinaimg.cn/large/6120fe13jw1entwctqx52j20wh06pdkg.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;文件：
&lt;img src=&#34;http://ww3.sinaimg.cn/large/6120fe13jw1entwf5kdp1j20kb070jv3.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;前期准备&#34;&gt;前期准备&lt;/h2&gt;

&lt;p&gt;先说下我所用的工具：Archlinux + Emacs24.4 + python2.7 + firefox&lt;/p&gt;

&lt;p&gt;Q：该用什么第三方库？
&amp;gt; python关于爬虫的第三方库何其多，这里我提供两套方案：
&amp;gt;
&amp;gt; 1. &lt;a href=&#34;http://requests.readthedocs.org/zh_CN/latest/&#34;&gt;Requests&lt;/a&gt; 加载网页 + &lt;a href=&#34;http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html&#34;&gt;BeautifulSoup&lt;/a&gt; 解析网页
&amp;gt; 2. &lt;a href=&#34;http://scrapy.org&#34;&gt;Scrapy&lt;/a&gt;，&lt;code&gt;xpath&lt;/code&gt;很好用&lt;/p&gt;

&lt;h2 id=&#34;抓取思路&#34;&gt;抓取思路&lt;/h2&gt;

&lt;p&gt;两套方案的思路都是一样的：首先我得知道最新一期的编号，如果比我已经下载的期数大，则从此期数开始遍历一直到已经爬过的期数，进入每期单独的页面，得到每期的名字用于建立目录，每期的歌单有多少歌以及歌名用于下载和重命名。代码这块我就只讲&lt;code&gt;Requests&lt;/code&gt;+&lt;code&gt;BeautifulSoup&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获取最新一期的编号，用Firebug查看html：
&lt;img src=&#34;http://ww1.sinaimg.cn/large/6120fe13jw1entxgq1gcnj20fc03cq3o.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numberUrl = &#39;http://www.luoo.net&#39;
def getTheMaxNumber():
    # get the html
    numberResponse = requests.get(numberUrl)
    numberResponse.encoding = &#39;utf-8&#39;
    numberSoup = BeautifulSoup(numberResponse.text, &#39;lxml&#39;)
    # parse the html and get the number
    numberText = (numberSoup.find_all(&#39;div&#39;, &#39;vol-item-lg&#39;)[0]).text

    maxNumber = int(re.findall(r&#39;\d+&#39;, numberText)[0])
    return maxNumber
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;进行比较，先读取保存文件目录下的number.txt看上次下载到了哪一期，如果最新期数大，则进入下载音乐的函数，否则返回：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# compare
if maxNumber &amp;gt; currentNumber:
    for i in range(currentNumber + 1, maxNumber + 1):
        downloadMusic(i)
    # after download the music, should write the right number to number.txt
    numberFile.write(str(maxNumber) + &#39;\t&#39; + time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;) + &#39;\n&#39;)
    numberFile.close()
else:
    # do nothing
    print &#39;您已经下载了所有的期数，谢谢！\n&#39;
    return
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;建立目录并下载音乐：
先用Firebug查看页面：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://ww4.sinaimg.cn/large/6120fe13jw1entxwx6hi8j20ao01vweq.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ww2.sinaimg.cn/large/6120fe13jw1entxzc87ehj20gn01imxk.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;得到期数ID&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;albumId = (albumSoup.find_all(&#39;span&#39;, &#39;vol-number rounded&#39;)[0]).text
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;得到期数名字用来建立目录，最好是将名字间的空格去掉，不然后面wget时会出现问题&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;albumName = (albumSoup.find_all(&#39;span&#39;, &#39;vol-title&#39;)[0]).text.replace(&#39; &#39;, &#39;_&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;得到每首歌的名字用来重命名音乐&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;musicList = (albumSoup.find_all(&#39;a&#39;, &#39;trackname btn-play&#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;建立目录：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;isExists = os.path.exists(saveDir)
if not isExists:
    os.makedirs(saveDir)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用wget下载mp3:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(1, len(musicList) + 1):
        currentMusicName = musicList[i - 1].text.replace(&#39; &#39;, &#39;_&#39;).replace(&#39;._&#39;, &#39;.&#39;).strip(&#39;(&#39;).strip(&#39;)&#39;)
        cmd1 = &#39;wget &#39; + musicUrl + str(int(albumId)) + &#39;/&#39; + string.zfill(i,2) + &#39;.mp3 &#39; + &#39;-O &#39; + saveDir + currentMusicName + &#39;.mp3&#39;
        cmd2 = &#39;wget &#39; + musicUrl + str(int(albumId)) + &#39;/&#39; + str(i) + &#39;.mp3 &#39; + &#39;-O &#39; + saveDir + currentMusicName + &#39;.mp3&#39;

        if os.system(cmd1.encode(&#39;utf-8&#39;)) != 0:
            os.system(cmd2.encode(&#39;utf-8&#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;完整代码&#34;&gt;完整代码&lt;/h2&gt;

&lt;p&gt;完整代码请移步我的&lt;a href=&#34;https://github.com/jlovedragon/CrawLuoo/tree/master/requests_bs4&#34;&gt;github&lt;/a&gt;
另一种方案Scrapy的思路一样，&lt;a href=&#34;https://github.com/jlovedragon/CrawLuoo/tree/master/scrapy&#34;&gt;代码&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://requests.readthedocs.org/zh_CN/latest/&#34;&gt;Requests: HTTP for Humans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html&#34;&gt;Beautiful Soup 4.2.0 文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chenqx.github.io/2014/11/09/Scrapy-Tutorial-for-BBSSpider/&#34;&gt;Scrapy爬虫抓取网站数据&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>ArchLinux安装与配置</title>
      <link>http://riverrrflow.github.io/myblog/post/2014-12-29-archlinux-setup-configuration/</link>
      <pubDate>Mon, 29 Dec 2014 16:01:23 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/post/2014-12-29-archlinux-setup-configuration/</guid>
      
        <description>

&lt;p&gt;电脑在Ubuntu14.04下发热厉害，网页开多了也经常死机，也差不多该更新换代了，但目前资金不足，便决定再次安装轻量级的&lt;a href=&#34;https://www.archlinux.org/&#34;&gt;ArchLinux&lt;/a&gt;，鉴于之前失败过一次，这次更加小心了。
先上图：
&lt;img src=&#34;http://ww4.sinaimg.cn/large/6120fe13jw1enu2a88703j20qa09zn0y.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;安装archlinux&#34;&gt;安装ArchLinux&lt;/h2&gt;

&lt;p&gt;这块直接参考&lt;a href=&#34;https://wiki.archlinux.org/index.php/Beginners%27_guidehttps://wiki.archlinux.org/&#34;&gt;ArchWiki&lt;/a&gt;，不喜欢英文的可以选择中文显示，ArchLinux的Wiki写的非常不错，一步一步照着敲肯定不会出错，这里我就写下几个我认为比较重要的地方：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;制作U盘镜像&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Linux用户可以直接用&lt;code&gt;dd&lt;/code&gt;命令，用U盘替换 /dev/sdx，如 /dev/sdb（不要加上数字，也就是说，不要键入 /dev/sdb1 之类的东西)：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dd bs=4M if=/path/to/archlinux.iso of=/dev/sdx &amp;amp;&amp;amp; sync
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Windows用户用Wiki上推荐的USBwriter制作的镜像可能引导不了，推荐大家使用&lt;a href=&#34;http://sourceforge.net/projects/win32diskimager/&#34;&gt;Win32 Disk Imager&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不过用这两种方式装完之后，都需要用Linux上的dd命令往U盘的前512字节写零来恢复它完整的容量：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dd count=1 bs=512 if=/dev/zero of=/dev/sdx &amp;amp;&amp;amp; sync
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;字符乱码问题&lt;/strong&gt; locale.gen不要全部配成zh开头的，还是加上en_US，这样安装完之后不会出现乱码。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;登陆管理器&lt;/strong&gt; 如果进入不了图形界面，一定要检查一下自己是否安装了登陆管理器，我现在使用的是slim，轻量级，并配置为随机主题，如果登陆管理器进不了图形界面，一般是配置文件有问题，可以按Ctrl+Alt+F2再开一个终端用root进行修改。&lt;/p&gt;

&lt;h2 id=&#34;钟爱的窗口管理器&#34;&gt;钟爱的窗口管理器&lt;/h2&gt;

&lt;p&gt;先比较下我用过的这些wm：gnome，i3wm，awesome，xmonad，herbstluftwm&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;gnome还是挺好看的，我喜欢它的gdm，就是太大太占资源，本本吃不起；&lt;/li&gt;
&lt;li&gt;i3wm用了将近一个月，配置简单，反应也不慢，但是我的chromium在里面运行时经常无故关闭，重装chromium，检查快捷键都没用，而且上面的i3bar看不习惯，就换了xmonad；&lt;/li&gt;
&lt;li&gt;看了一点haskell之后配置了一下xmonad，发现确实不好配置，haskell这门语言也需要花时间去学习，就试试awesome；&lt;/li&gt;
&lt;li&gt;相比xmonad，awesome配置起来还是很方面的，用了将近一个星期，感觉awesome过于复杂，而且那个bar也不好看，换成herbstluftwm；&lt;/li&gt;
&lt;li&gt;目前用的就是herbstluftwm，配置简单，操作方便，运行速度也非常快，而且为了让窗口达到最大化，我直接去掉了状态栏。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面列一下我使用的配置文件中重要的配置(~/.config/herbstluftwm/autostart):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Mod=Mod4   # Use the super key as the main modifier
feh --bg-scale /home/quentin/Entertainment/Pictures/niu.jpg # background
xcompmgr -c # transparent
# keybindings
hc keybind Control-bracketleft spawn emacs
hc keybind Control-F1 spawn deepin-screenshot
hc keybind Control-F2 spawn chromium
hc keybind Control-F3 spawn firefox
hc keybind Control-F4 spawn /opt/ideaIU/bin/idea.sh
hc keybind Control-F5 spawn virtualbox
hc keybind Control-F6 spawn python /home/quentin/git/my_profile/OpenOrClosePSMouse.py
hc keybind Control-F7 spawn evince # PDF
hc keybind Control-F9 spawn deadbeef # music
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;常用软件&#34;&gt;常用软件&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;software&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Emacs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;神的编辑器&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Urxvt&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最常用的终端&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;zsh&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;自动补全很给力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ibus&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;中文输入法&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;git&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;版本控制&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;chromium&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;书签同步太强大&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;firefox&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;离不开firebug等各种插件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;IDEA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Java IDE&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;evince&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;看PDF&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;deadbeef&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;听音乐&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;需要说的是deepin-screenshot这款截图软件，相比QQ上的截图工具也毫不逊色，但使用命令&lt;code&gt;yaourt -S deepin-screenshot&lt;/code&gt;安装会出现:
&lt;code&gt;在构建deepin-pygtk时提示：无法下载pygtk_2.24.0-3deepin3.debian.tar.gz&lt;/code&gt;
故需要在&lt;code&gt;/etc/pacman.conf&lt;/code&gt;中添加源:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[home_metakcahura_arch-deepin_Arch_Extra]
SigLevel = Never
Server = http://download.opensuse.org/repositories/home:/metakcahura:/arch-deepin/Arch_Extra/$arch
# 若升级时若总是提示文件校验失败，使用备用地址即可
# Server = http://anorien.csc.warwick.ac.uk/mirrors/download.opensuse.org/repositories/home:/metakcahura:/arch-deepin/Arch_Extra/$arch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再直接用pacman安装即可，详细请看我之前再Arch Forums上发的帖子&lt;a href=&#34;https://bbs.archlinuxcn.org/viewtopic.php?id=3040&#34;&gt;用yaourt安装deepin-screenshot失败，archlinux12.01-ideapadY460&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;配置文件下载&#34;&gt;配置文件下载&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jlovedragon/profile/tree/master/archlinux&#34;&gt;github链接&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>为什么要写Blog？</title>
      <link>http://riverrrflow.github.io/myblog/post/2014-12-28-why-blog/</link>
      <pubDate>Sun, 28 Dec 2014 16:01:23 +0800</pubDate>
      
      <guid>http://riverrrflow.github.io/myblog/post/2014-12-28-why-blog/</guid>
      
        <description>

&lt;h2 id=&#34;初衷&#34;&gt;初衷&lt;/h2&gt;

&lt;p&gt;其实关于这个问题，网上已经有很多很多回答，我觉得&lt;a href=&#34;http://www.ruanyifeng.com/home.html&#34;&gt;阮一峰&lt;/a&gt;写的&lt;a href=&#34;http://www.ruanyifeng.com/blog/2006/12/why_i_keep_blogging.html&#34;&gt;这个&lt;/a&gt;不错，另外，我也写几点自己的想法与感受：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;强化学到的知识&lt;/strong&gt;，我意识到并不是自己学的东西少，而是学了不记录不回顾就忘了，等到在要用时又得重新来过，既影响时间效率，也不利于知识的积累与沉淀。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;尝试将自己的想法表达清楚&lt;/strong&gt;，如果表达不清楚，就说明自己理解的知识还不够清楚明晰，这样不仅可以提高自己的文字组织能力和逻辑思维能力，也会让自己学到的知识更加扎实。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交到志同道合的朋友&lt;/strong&gt;，在分享自己的学习经历时，如果能遇到有同感的朋友互相交流，也是非常令人高兴的事儿。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成长的点滴&lt;/strong&gt;，记录的点点滴滴，就是认识自己，面对自己的过程，在这个过程中，勿忘最初的自己，找到最好的自己。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;一份耕耘，一份收获，之所以将这篇博文作为自己独立博客的第一篇，就是要自己不要忘记初衷，坚持下去，成为持续思考和学习的人。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>